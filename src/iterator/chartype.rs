/// Character Types generated by the iterator
/// 
/// Punctuators are as follows [ # ! $ & ... , : = @ ( ) [ ] { } |]

#[derive(Debug, Clone, Copy, PartialEq, Eq)]
#[repr(u16)]
pub enum CharType {
    Whitespace, // \r | \n |   | \t
    Comment,    // # comment
    Bang,       // !
    Dollar,     // $
    Amp,        // &
    Spread,     // ...
    Comma,      // ,
    Colon,      // :
    Eq,         // =
    At,         // @
    LParen,     // (
    RParen,     // )
    LBracket,   // [
    RBracket,   // ]
    LCurly,     // {
    RCurly,     // }
    Pipe,       // |
    Eof,

    // composite nodes
    Name,
    StringValue,
    Int,
    Float,
}

/// Create a new `CharType`.
#[macro_export]
macro_rules! T {
    [!] => { $ crate :: CharType :: Bang } ;
    [$] => { $ crate :: CharType :: Dollar } ;
    [&] => { $ crate :: CharType :: Amp } ;
    [...] => { $ crate :: CharType :: Spread } ;
    [,] => { $ crate :: CharType :: Comma } ;
    [:] => { $ crate :: CharType :: Colon } ;
    [=] => { $ crate :: CharType :: Eq } ;
    [@] => { $ crate :: CharType :: At } ;
    ['('] => { $ crate :: CharType :: LParen } ;
    [')'] => { $ crate :: CharType :: RParen } ;
    ['['] => { $ crate :: CharType :: LBracket } ;
    [']'] => { $ crate :: CharType :: RBracket } ;
    ['{'] => { $ crate :: CharType :: LCurly } ;
    ['}'] => { $ crate :: CharType :: RCurly } ;
    [|] => { $ crate :: CharType :: Pipe } ;

    // composite nodes
    [name] => { $ crate :: CharType :: Name } ;
    [string] => { $ crate :: CharType :: StringValue} ;
    [int] => { $ crate :: CharType :: Int} ;
    [float] => { $ crate :: CharType :: Float} ;
}