use std::fmt;

use crate::CharType;

// A bearer token generated by the iterator
#[derive(Clone)]
pub struct Bearer {
    pub(crate) kind: CharType,
    pub(crate) data: String,
    pub(crate) index: usize,
}

impl Bearer {
    pub(crate) fn new(kind: CharType, data: String) -> Self { // Unsafe fn
        Self {
            kind,
            data,
            index: 0,
        }
    }

    pub fn kind(&self) -> CharType {
        self.kind
    }

    /// Get a reference to the bearer's data.
    pub fn data(&self) -> &str {
        self.data.as_str()
    }

    /// Get a reference to the bearer's index.
    pub fn index(&self) -> usize {
        self.index
    }
}

// TO-DO : Implement test cases..